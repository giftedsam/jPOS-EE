== Getting Started

=== Prerequisites

jPOS-EE-SDK assumes that the following software is installed in your
development environment:

* http://java.sun.com[JDK 1.5 or higher]
* link:maven.apache.org[Apache Maven]
* A git client such as git-core (command-line) or http://www.syntevo.com/smartgit/index.html[SmartGIT]

While jPOS and jPOS-EE can be used in a Windows environment, we develop
it within our Unix environment, so you'll find many useful Unix scripts
but no Windows counterpart. If you do use windows, may choose to install
a Unix-like environment such as http://www.cygwin.com[Cygwin] so you can
make use of the unix scripts directly.

=== Verifying your Maven setup

At an unix shell (Cygwin shell or as a last resort, your COMMAND.COM),
please try:

--------------------
$ mvn -version
--------------------

you should see output like :-

---------------------------------------------------------
Apache Maven 3.0.4 (r1232337; 2012-01-17 04:44:56-0400)
Maven home: /Users/salaman/Java/apache-maven-3.0
Java version: 1.7.0_04, vendor: Oracle Corporation
Java home: /Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/jre
Default locale: en_US, platform encoding: UTF-8
OS name: "mac os x", version: "10.7.3", arch: "x86_64", family: "mac"
---------------------------------------------------------

If the user is not familiar with Maven the following resources might help:

* http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html[Maven in 5 minutes]
* http://maven.apache.org/guides/getting-started/index.html[Maven getting started guide]

=== Using an IDE

jPOS-EE is known to work with most modern IDEs such as Eclipse,
NetBeans, Jetbrain's IDEA(R) usually by having your IDE import
jPOS-EE's pom.xml, but you need to know what you're doing because
you are basically on your own.

This documentation shows you how to build jPOS-EE using a barefoot Maven
setup. If you understand how that works and you can run it from your
IDE, that's great; otherwise, you'll have to learn more about Maven, our
build process and how your own IDE actually works.

=== Using an application server

jPOS-EE is a stand-alone application that runs off jPOS' Q2 container.

We are aware that there are companies and institutions that standardize
on using a given application server or JEE container. That's great, but
jPOS-EE is a stand-alone application. If you master your application
server, you will certainly be able to integrate jPOS-EE, either as a
client EJB application, as a Resource Adapter, a WAR, EAR, etc. In
addition, some application servers have proprietary extensions that
facilitates such integration.

But let us repeat this one more time. jPOS-EE is a stand alone
application. If you know how to run it inside application server XYZ,
that's perfect; If we can make your life easier by doing something on
our end that makes that integration easier, and you have the expertise
in both jPOS-EE and your application server to provide us detailed
instructions on what you need, and the changes won't break any existing
jPOS or jPOS-EE functionality, then we are willing to do so, but if you
decide to go that route, you'd be on your own.

== Preparing your environment

In this chapter we will work through setting up the development environment consisting of:

* Downloading the jPOS-EE SDK source code using Git.
* Compiling and installing the components locally on your system using Maven.

=== Downloading the SDK

jPOS-EE is distributed via Git only. In order to get a copy of
it, and keep your copy up-to-date with the latest revision, you need to
use a Git client.

Git installation instructions for Windows, Linux and MacOS X are available here:
http://help.github.com/set-up-git-redirect[Git Setup].

jPOS-EE is hosted at https://github.com/jpos/jPOS-EE[GitHub]. By visiting
the project page you will be provided information on how to Checkout,
Browse and see a history of changes to the system.

If you are on an Unix/Unix-like environment, an initial checkout would
look something like :-

-------------------------------------------------------------------------
$ git clone https://github.com/jpos/jPOS-EE.git
Cloning into 'jPOS-EE'...
remote: Counting objects: 627, done.
remote: Compressing objects: 100% (355/355), done.
remote: Total 627 (delta 250), reused 528 (delta 151)
Receiving objects: 100% (627/627), 127.72 KiB, done.
Resolving deltas: 100% (250/250), done.
$
-------------------------------------------------------------------------


This will create a new directory ``jPOS-EE'' containing a clone of what's currently in the master branch at our central GitHub repository.


=== Installing the SDK

Install the framework, please enter following command from within the SDK top-level directory:

    mvn install

NOTE: If this is your first time installing Maven, this step will take some time while Maven downloads all dependencies.

Once this step is complete, you should have on your screen something similar to:

----------------------------------------------------------------------------

[INFO] Reactor Summary:
[INFO]
[INFO] jPOS-EE :: Dependencies ........................... SUCCESS [0.437s]
[INFO] jPOS-EE :: Parent ................................. SUCCESS [0.010s]
[INFO] jPOS-EE :: Modules ................................ SUCCESS [0.008s]
[INFO] jPOS-EE :: Core Module ............................ SUCCESS [3.545s]
-+-+-+ Lines skipped
[INFO] jPOS-EE :: Testbed ................................ SUCCESS [7.742s]
[INFO] jposee-quickstart-archetype ....................... SUCCESS [0.782s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 32.521s
[INFO] Finished at: Tue May 01 08:54:59 AST 2012
[INFO] Final Memory: 24M/81M
[INFO] ------------------------------------------------------------------------

----------------------------------------------------------------------------

If your build completes with ``BUILD SUCCESS'' , you are ready to proceed to create your first project!

[NOTE]
.What did we just do?
==========================================================================
Maven just built and installed all of its components into your local Maven
repository, where they can be accessed by any of your projects.
==========================================================================
