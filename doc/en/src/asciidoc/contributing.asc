== Contributing to the project

This project uses Fork & Pull collaborative development model
as described in: https://help.github.com/articles/using-pull-requests.

The following sections provide the guidelines to follow before a contribution
is made to the project.

=== GitHub Workflow

==== Quickfire Do's and Don't's

If you're familiar with git and GitHub, here's the short version of what you need to know.
Once you fork and clone the jPOS-EE code:

* *Don't develop on the master branch*. Always create a development branch specific to
the issue(https://github.com/jpos/jPOS-EE/issues) you're working on. Name it by issue # and description.
For example, if you're working on Issue #359, an aspect naming fix, your development branch
should be called 359-aspect-names. If you decide to work on another issue mid-stream,
create a new branch for that issue--don't work on both in one branch.

* *Do not merge the upstream master with your development branch*;
rebase your branch on top of the upstream master.

* *A single development branch should represent changes related to a single issue.*
If you decide to work on another issue, create another branch.

==== Step-by-step (the short version)

1. Fork on GitHub (click Fork button)
2. Clone to computer (`$ git clone git@github.com:~you~/jPOS-EE.git`)
3. Don't forget to cd into your repo: (`$ cd jPOS-EE/`)
4. Set up remote upstream (`$ git remote add upstream git://github.com/jpos/jPOS-EE.git`)
5. Create a branch for new issue (`$ git checkout -b 100-new-feature`, if you don't have a bug report no worries just skip the number)
6. Develop on issue branch. [Time passes, the main jPOS repository accumulates new commits]
7. Commit changes to issue branch. (`$ git add . ; git commit`)
8. Fetch upstream (`$ git fetch upstream`)
9. Update local master (`$ git checkout master; git pull upstream master`)
10. Repeat steps 5-8 till dev is complete
11. Rebase issue branch (`$ git checkout 100-new-feature; git rebase master`)
12. Push branch to GitHub (`$ git push origin 100-new-feature`)
13. Issue pull request (Click Pull Request button)

Extra reading material on forking can be found at : http://gun.io/blog/how-to-github-fork-branch-and-pull-request/

==== Commit messages

Please read http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html for
guidelines in creating good commit messages.

=== Coding conventions

We adhere to standard
http://java.sun.com/docs/codeconv/CodeConventions.pdf[Sun's java (R)
coding conventions] for the Java Language, that among other things it
specifies: Four spaces should be used as the unit of indentation. The
exact construction of the indentation (spaces vs. tabs) is unspecified.
Tabs must be set exactly every 8 spaces (not 4).

Due to our revision control system, we also need that hard tabs (ASCII
0x09) are not used in source code and configuration files (in order for
diff to work properly among platforms.

For 'vi' users, we are using the following .vimrc:

-------------------
      set ts=8
      set sts=4
      set sw=4
      set expandtab
-------------------

