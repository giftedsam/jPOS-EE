== Five minute tutorial

As you know, nothing speaks better than an example, so let's get to it!

Let's create our first project. The jPOS-EE SDK makes this very easy by providing a Maven archetype.

To create a quick-start project, enter the following command:

    mvn -U archetype:generate -Dfilter=jposee

NOTE: This command let's us choose an archetype using a filter. In this case, we've filtered
for any archetype that includes jposee in it's name. Since this filter functionality is new, we use the "-U" argument,
to force Maven to check for plugin updates.

If everything went well, Maven should be prompting you to select the archetype to use as seen here:

---------------------------------------------------------------------------------------------
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building Maven Stub Project (No POM) 1
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] >>> maven-archetype-plugin:2.2:generate (default-cli) @ standalone-pom >>>
[INFO]
[INFO] <<< maven-archetype-plugin:2.2:generate (default-cli) @ standalone-pom <<<
[INFO]
[INFO] --- maven-archetype-plugin:2.2:generate (default-cli) @ standalone-pom ---
[INFO] Generating project in Interactive mode
[INFO] No archetype defined. Using maven-archetype-quickstart
Choose archetype:
1: local -> org.jpos.ee:jposee-quickstart-archetype (jposee-quickstart-archetype)
Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): : 1
---------------------------------------------------------------------------------------------

It will then ask you for:

[options="compact"]
* a groupId
* an artifactId
* a version
* a java package

It will then ask for confirmation and proceed to create the project. If all went well, the last lines of your build should be similar to:

---------------------------------------------------------------------------------------------
[INFO] project created from Archetype in dir: /Users/vsalaman/projects/jposee-demo
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 31.287s
[INFO] Finished at: Tue May 01 09:02:40 AST 2012
[INFO] Final Memory: 7M/81M
[INFO] ------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Wow, that was easy!. The quickstart archetype we just used, creates a starter project capable of:

[options="compact"]
* Compiling your java code.
* Creating a "runtime" directory to host your project instance.
* Copying all dependencies to the "runtime/lib" directory.
* Creating an executable jar which invokes Q2 on startup. It also contains your code and references all needed dependencies.

Now let's go ahead and compile our new project. Run this command **from within** the project directory:

    mvn package

If your build was successful, you should now have a newly created "runtime" directory much similar to:

--------------------------------
runtime
|____lib
|____q2.jar
---------------------------------

You can now take it for a spin!

    cd runtime
    java -jar q2.jar -cli

Your Q2 instance is now ready, running from the "runtime" directory.

Since we've specified the "-cli" argument, we get a nifty command line shell from within Q2.

At this prompt type:

    setup .

In a few seconds, you should see some console activity.

TIP: The 'setup' command installs the sample configuration and deployment files from *every*
jPOS-EE module defined as a dependency in your project. It takes a path as an argument, so using
"." as that parameter, effectively installs the files in places where Q2 will automatically see
them (the current directory).

You can exit the shell by using the CTRL-C keyboard combination.

Once out of Q2, if you examine the runtime directory once again, you'll notice there are some new files and directories:

--------------------
runtime
|____cfg                <1>
| |____db.properties
| |____README.txt
|____deploy             <2>
| |____00_logger.xml
| |____99_sysmon.xml
|____lib                <3>
| |____jposee-txn-2.0.0.jar
-+-+-+-+-+ LINES OMMITTED +-+-+-+-+-
| |____jta-1.1.jar
| |____slf4j-log4j12-1.6.1.jar
|____log                <4>
| |____q2.log
|____q2.jar
--------------------

While all this might seem magical at first, it's not, so let's recap.

When we invoked the "package" goal on the project created by the archetype, it created a "runtime" directory. This
directory is in a standard convention format used by the jPOS-EE SDK.

<1> This directory contains configuration files used any component.
<2> The deploy directory is special. Any xml file copied is treated as a QBean descriptor,
    and automatically deploys a single QBean service. If this file is later removed, then the service is undeployed.
<3> The 'lib' directory by convention holds all of the project dependencies.
<4> The 'log' holds all the logs.

Now let's go under the hood.

=== Inside the Maven POM

If you take a look at the pom.xml you'll see several important sections:

At the top of the file we'll find the required Maven coordinates (groupId,artifactId,version). If you notice that these elements have been
pre-filled with your answers from the archetype, you've been paying attention!

----
    <groupId>com.democorp</groupId>
    <artifactId>jposee-demo</artifactId>
    <version>1.0-SNAPSHOT</version>
----

Next, we'll see some important properties:

----
    <properties>
        <runtime.dir>${project.basedir}/runtime</runtime.dir>  <1>
        <jposee.version>2.0.0</jposee.version>        <2>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
----
<1> This property defines where our runtime directory should go. As defined, the runtime directory would be
    created relative to the base of project basedir.
<2> This property defines in a central location, the jPOS-EE version of the JDK we'll be using.

Next, let's take a look at the dependencies:

First, we have defined dependencies to several module:

----
    <dependency>
        <groupId>org.jpos.ee</groupId>
        <artifactId>jposee-core</artifactId>
        <version>${jposee.version}</version>
    </dependency>

    <dependency>
        <groupId>org.jpos.ee</groupId>
        <artifactId>jposee-txn</artifactId>
        <version>${jposee.version}</version>
    </dependency>

    <dependency>
        <groupId>org.jpos.ee</groupId>
        <artifactId>jposee-db-h2</artifactId>
        <version>${jposee.version}</version>
    </dependency>
----

As you can see, adding a module to your project is just as easy as
adding a Maven dependency. By adding these 3 dependencies, we have
added the core module, the transaction support module and support
for the H2 database, giving us a complete database driven jPOS-EE application.

